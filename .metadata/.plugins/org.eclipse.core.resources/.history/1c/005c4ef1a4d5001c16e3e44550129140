package com.kh.model.dao;

import static com.kh.common.JDBCTemplate.close;

import java.lang.reflect.Member;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.kh.model.vo.RestaurantMenuList;

/*
 * DAO (Data Access Object)
 * 
 * 데이터베이스 관련된 작업(CRUD)을 전문적으로 담당하는 객체
 * DAO안에 모든 메서드를 데이터베이스와 관련된 작업으로 만든다.
 * 
 * CRUD - CREATE, RETRIEVE(READ), UPDATE, DELETE(DESTROY)
 * SQL DML
 * 	   SELECT
 * 
 * Controller를 통해서 호출된 기능을 수행
 * DB에 직접적으로 접근한 후 해당 SQL문을 실행 및 결과 받기(JDBC)
 * 
 */

public class RestaurantOrderDao {
	
	/*
	 *  * 처리순서
	 *  1) JDBC Driver 등록 : 해당 DBMS가 제공하는 클래스 등록
	 *  2) Connection 객체 생성 : 접속하고자 하는 DB의 정보를 입력해서 DB에 접속하면서 생성(url, 계정 , 비번)
	 *  3_1) PreparedStatement 객체 생성 : Connection 객체를 이용해서 생성 (미완성된 SQL문을 담아서)
	 *  3_2) 현재 미완성된 SQL문을 완성형태로 채워지구 => 미완성일 경우에만 해당 / 완성이면 걍 보내라
	 *  4) SQL문 실행 : executeXXXX() => sql 매개변수 x => SELECT : executeQeury() / DML : executeUpdate()
	 *  5) 결과 받기 : SELECT : Result 객체(조회된 데이터들이 담겨있음 ) => 6_1)
	 *  			DML : int형 (처리된 행의 개수) => 6_2)
	 *  6_1) ResultSet에 담겨있는 데이터들을 하나씩 뽀아서 VO객체에 담는다(많으면 List)
	 *  6_2) 트랜잭션처리(성공이면 COMMIT, 실패면 ROLLBACK)
	 *  7) 다쓴 JDBC용 객체 반드시 자원반납(close()) => 생성 순서의 역순!! 중요
	 *  9) 결과 반환(Service)
	 * 
	 */
	
	
//	public int insertMember(Connection conn, Member m) {
//		
//		// 0) 필요한 변수들 먼저 셋팅
//		int result = 0; // 처리된 결과(행의 갯수)를 담아줄 변수
//		
//		PreparedStatement pstmt = null; // SQL문 실행 후 결과를 받기 위한 변수
//		
//		// 실행할 SQL문(미완성형태)
//		String sql = "INSERT INTO MEMBER " +
//					"VALUES(SEQ_USERNO.NEXTVAL, ?,?,?,?,?,?,?,?,?, SYSDATE)";
//		
//		try {
//			// 3_1) PreparedStatement 객체 생성(SQL문 미리 넘겨준다.)
//			pstmt = conn.prepareStatement(sql);
//			
//			// 3_1) 미완성된 SQL문일 경우 완성시키기
//			// pstmt.setXXX(? 위치, 실제값)
//			pstmt.setString(1, m.getUserId());
//			pstmt.setString(2, m.getUserPwd());
//			pstmt.setString(3, m.getUserName());
//			pstmt.setString(4, m.getGender());
//			pstmt.setInt(5, m.getAge());
//			pstmt.setString(6, m.getEmail());
//			pstmt.setString(7, m.getPhone());
//			pstmt.setString(8, m.getAddress());
//			pstmt.setString(9, m.getHobby());
//			
//			// 4, 5) DB에 완성된 SQL문을 실행 후 결과(처리된 행의 갯수)받기
//			result = pstmt.executeUpdate();
//		
//		
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			close(pstmt);
//		}		
//		return result;
//	}
	
	
	public ArrayList<RestaurantMenuList> selectAll(Connection conn){
		
		// 0) 필요한 변수들 셋팅
		// 	   조회된 결과를 뽑아서 담아줄 변수 => ArrayList 생성
		ArrayList<RestaurantMenuList> list = new ArrayList<>();
		
		// preparedStatement, ResultSet
		PreparedStatement pstmt = null; // SQL실행 / 결과받을 변수
		ResultSet rset = null; // SELECT문이 실행된 조회결과값들이 처음 담길 객체
		
		// 실행할 SQL문
		String sql = "SELECT * FROM MENULIST ORDER BY MENUNO ASC";
		
		try {
			// 3_1) PreparedStatemnet 객체 생성(SQL문을 미리 같이 넘겨줌)
			pstmt = conn.prepareStatement(sql);
			
			// 3_2) 미완성된 SQL문이라면 완성시켜주기! => 스킵!
			
			// 4, 5) SQL(SELECT)문을 실행 후 결과 (ResultSet) 받기
			rset = pstmt.executeQuery();
			
			// 6_1) 현재 조회결과가 담긴 ResutSet에서 한행씩 뽑아서 VO객체에 담기
			while(rset.next()) {
				list.add(new RestaurantMenuList(
									rset.getInt("MENUNO")
								   ,rset.getString("MENU")
								   ,rset.getInt("PRICE")
								   ,rset.getString("CATEGORY")
								   ,rset.getString("TASTE")));
				
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace(); 
		} finally {// 7) 다 쓴 JDBC용 객체 반납(생성된 순서의 역순으로)
			close(rset);
			close(pstmt);
		}
		return list;
	}
	
	
	
//	public Member selectByUserId(Connection conn, String userId) {
//		
//		Member m = new Member();
//		
//		PreparedStatement pstmt = null;
//		ResultSet rset = null;
//		
//		String sql = "SELECT * FROM MEMBER WHERE USERID = ?";
//		
//		try {
//			pstmt = conn.prepareStatement(sql);
//			pstmt.setString(1, userId);
//			
//			rset = pstmt.executeQuery();
//			
//			if(rset.next()) {
//				m = new Member(rset.getInt("USERNO")
//							  ,rset.getString("USERID")
//							  ,rset.getString("USERPWD")
//							  ,rset.getString("USERNAME")
//							  ,rset.getString("GENDER")
//							  ,rset.getInt("AGE")
//							  ,rset.getString("EMAIL")
//							  ,rset.getString("PHONE")
//							  ,rset.getString("ADDRESS")
//							  ,rset.getString("HOBBY")
//							  ,rset.getDate("ENROLLDATE"));
//			}
//			
//			
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			close(rset);
//			close(pstmt);
//		}
//		return m;
//	}
//	
//	
//	
//	public ArrayList<Member> selectByUserName(Connection conn, String keyword){
//		ArrayList<Member> list = new ArrayList<>();
//		
//		PreparedStatement pstmt = null;
//		ResultSet rset = null;
//		String sql = "SELECT * FROM MEMBER WHERE USERNAME LIKE ?";
//		
//		try {
//			pstmt = conn.prepareStatement(sql);
//			pstmt.setString(1, "%" + keyword + "%");
//			rset = pstmt.executeQuery();
//			
//			while(rset.next()) {
//				list.add(new Member(rset.getInt("USERNO")
//									,rset.getString("USERID")
//									,rset.getString("USERPWD")
//									,rset.getString("USERNAME")
//									,rset.getString("GENDER")
//									,rset.getInt("AGE")
//									,rset.getString("EMAIL")
//									,rset.getString("PHONE")
//									,rset.getString("ADDRESS")
//									,rset.getString("HOBBY")
//									,rset.getDate("ENROLLDATE")));
//			}
//			
//			
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			close(rset);
//			close(pstmt);
//		}
//		return list;
//	}
//	
//	
//	public int updateMember(Connection conn, Member m) {
//		
//		int result = 0;
//		PreparedStatement pstmt = null;
//		
//		String sql = "UPDATE MEMBER SET USERPWD = ?, EMAIL = ?, PHONE = ?, ADDRESS = ? WHERE USERID = ?";
//		
//		try {
//			pstmt = conn.prepareStatement(sql);
//			pstmt.setString(1, m.getUserPwd());
//			pstmt.setString(2, m.getEmail());
//			pstmt.setString(3, m.getPhone());
//			pstmt.setString(4, m.getAddress());
//			pstmt.setString(5, m.getUserId());
//			result = pstmt.executeUpdate();
//			
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			close(pstmt);
//		}
//		return result;
//	}
//	
//	
//	public int deleteUserId(Connection conn, String userId) {
//		
//		int result = 0;
//		PreparedStatement pstmt = null;
//		
//		String sql = "DELETE FROM MEMBER WHERE USERID = ?";
//		
//		try {
//			pstmt = conn.prepareStatement(sql);
//			pstmt.setString(1, userId);
//			
//			result = pstmt.executeUpdate();
//			
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			close(pstmt);
//		}
//		return result;
//	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
